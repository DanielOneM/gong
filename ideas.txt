Stress test:

4-5 workers that send sms
1 worker that analyzes answers
Web dashboard to command/see results
multi user login
user can change encoding for messages sent; user can select one of the two available modes; stress testing is not available to all users; if there is a stress test in progress, any user that accesses that section cannot start a new stress test but can view the results of the current stress test;

testing scenarios=send one message, see if the returned message matches your expectations, make a list of messages with matches

testing scenario can be manual (user advances manually to the next step in the scenario, confirming visually that the received message is correct) or automated (user starts a sequence and the sequence stops at the first occurence of a message that does not fit the expected response); user can deploy multiple automated scenarios at the same time

stressing scenarios=send x messages, with frequency z, for period y, check that all messages get answered, check latency

results from testing scenarios=log with received message, timing of message sent and message received

results from stressing scenarios=graph with number of messages sent/received per second, for the given interval, info about percentage of messages dropped (unanswered), grouping of answer times (eventually graph of average answer times as related to volume of sent messages; the results should be saved and can be viewed and compared to past results

there's an admin section where you can add or delete connections to jasmin smsc's with info about what settings are necessary. also here there is a section where you can build sequences (ordered lists of msgs). messages can be simple or paired (where you have a message and an expected response pattern or text attached to it). sequences are built out of messages; the user can either enter message-response pairs in the sequence builder. sequences can be of unlimited length.

in the simple testing area, you can select one jasmin and test with one of the following flows: enter a message and wait for a response, select a sequence from the library, check if it should block on error or not. the results will be displayed in a dialog area. stats from the exchange will be displayed on the side.


1.the user selects stress testing. 
2.the user selects one jasmin to stress test. 
3.the user selects one or more operators to use
4.the user selects min and max phone numbers per operator and duration of testing
5.the user selects a flood strategy from the following: 
	-full force(same number of smses for each operator and each phone number, from the start, for a given time interval)
	-balanced growth(each operator starts sending a min nr of smses and within a timed interval of each other they start growing until a max sms, then decreasing back to an average)
	-random(each phone number sends a random number of smses within a min and a max)
	-custom(for each operator the user defines a min smses, a max smses, optionally a function to handle variations; otherwise linear is used)
6.the user selects one or more sequences to use in testing; alternatively sequences can be selected randomly for each operator and each phone number
7.the user starts testing
8.the app keeps the following analytics: total smses sent per phone number, smses per second per phone number, total responses per phone number, responses per second per phone number, total valid responses per phone number, invalid responses per phone number, idle time per phone number

1.the user selects normal testing
2.the user selects one jasmin to use for testing.
3.the user selects one operator
4.the user selects a used number or starts a new number
5.the user interacts manually with the server, sending a sms or selecting a sequence to be sent
6.the app keeps the same analytics as in stress testing

app has to save:
-operator ids
-phone numbers
-analytics for each phone number and each session
-sequences (of smses)
-users

app has to cache:
-active phone numbers and stats for each
-sms sequence (to handle responses and check errors)

questions:
1.can we start multiple smpp servers on different ports simultaneously? maybe using the ireactor spawnprocess?

architecture:
-command and control module, that handles user interaction and analytics:
	-web frontend using twisted and jinja2
	-analytics service (possibly run separately from the web frontend??)
-X workers, each posing as one operator to a certain jasmin server (optionally X jasmin instances running in parallel)
-mongodb to handle persistent data
-redis to handle cached data

various:
-in jasmin there are multiple factories tied to the same reactor
-the idea would be to start multiple servers and then start the reactor (obviously this means that you cannot dynamically add servers while running)
-the c&c server would have multiple services: web interface, analytics service, 
-the worker would take inputs from one rmq queue and send them to the connected entities; any messages received would be put on another rmq queue

implementation:
-we start a reactor with the smpp server
-the smpp server sends a message each time there is any event on the pika incoming queue
-the smpp server puts a message on the outgoing pika queue each time it receives a message
-the starting config contains the following: 
	for the smpp server: host, port, user, password
	for the pika queues: host, port, incoming queue name, outgoing queue name
-the worker has two components: smpp server and rmq queue
-a deferred queue gets attached to the pdureceived function of the smpp server
-set the config.msgHandler to a function that puts the received message on a rmq queue

-the overall app will start a web server listening on local port 5000 (or specify a substitute)
-in the web interface you can start a number of connections to remote jasmins (gong workers)
-connections will be stopped when the main server is stopped

web:
-4 sections: dashboard, functional testing, stress testing, settings
-dashboard will show a list of logged-in users and what they are doing, plus a big warning sign in case there is a stress testing session going on already; also status green or red on all the jasmin connections;
-async connection to kraken, async script to test the availability of jasmin connections (telnet to jasmins)
-functional testing section: start page showing a selection of available connections; user selects a connection; functional testing page displays chat box, action box with possible actions (record session (yes/no), export to csv, export to jira, ), info box on the side containing phone number, operator data; below info box there's a stats box showing total number of messages sent and received per session, average return time
-analytics for testing sessions are kept in a local cache (redis maybe)
-twisted c&c app will have following components: telnetchecker, pikachecker, krakenchecker, webinterface, rediscache
-stores all the data (connections, operators, test library, strategies) in kraken

fields for web sections:
-test library: service name, check output, input command, output data patterns
-connections: jasmin ip/port, jasmin user/pwd, gong data (user, pwd, ip, port)
-operators: name, jasmin connection used, numbers registered
-stress strategies: strategy name/description, nr of operators, min/max phones, per operator settings (strategy curve, start time delay, total running time)

strategy curve is a polynomial function where x is time and y is the number of messages; given a certain timestamp x you can determine the number of messages y to be sent at that timestamp

TODO:
-make a list of smpp attributes needed for the smpp message
-the big service can hold also the http server for the web service
-make a component that will connect to kraken and create, read, update, delete all the needed info (operators and numbers, connections, etc)
-most of the configuration will be stored there
-gongworker will be a separate process; cannot start multiple instances after reactor has started; communicate with gongworker through local rabbitmq (or perspective broker); start/stop through multiprocessing script


https://twisted.readthedocs.io/en/latest/core/howto/tutorial/intro.html
https://twisted.readthedocs.io/en/latest/core/howto/defer-intro.html
http://flylib.com/books/en/2.407.1.38/1/
http://twistedmatrix.com/documents/current/web/howto/web-in-60/dynamic-dispatch.html
http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
http://twistedmatrix.com/pipermail/twisted-python/2007-June/015623.html
https://twistedmatrix.com/documents/current/core/howto/process.html
file:///home/dread/Downloads/startbootstrap-sb-admin-2-gh-pages/pages/flot.html